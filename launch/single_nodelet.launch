<launch>

  <!-- Link to the custom libsub (LD_LIBRARY_PATH is searched before ld.so.conf.d, so the custom libusb will be used instead of the system default-->
  <env name="LD_LIBRARY_PATH" value="/opt/mvIMPACT_acquire_libusb:$(env LD_LIBRARY_PATH)" />

  <!-- Common Interface -->
  <arg name="device"/>
  <arg name="rate" default="60"/>

  <!-- Camera Settings -->
  <arg name="serial" default="$(arg device)"/>
  <arg name="camera_name" default="mv_$(arg serial)"/>
  <arg name="camera" default="$(arg camera_name)"/>
  <arg name="frame_id" default="$(arg camera)"/>
  <arg name="calib_url" default="file://${ROS_HOME}/camera_info/$(arg camera_name).yaml"/>
  <arg name="fps" default="$(arg rate)"/>
  <arg name="color" default="false"/>
  <arg name="aec" default="0"/>
  <arg name="cbm" default="false"/>
  <arg name="ctm" default="1"/>
  <arg name="dcfm" default="0"/>
  <arg name="hdr" default="false"/>
  <arg name="wbp" default="-1"/>
  <arg name="expose_us" default="5000"/>
  <arg name="gain_db" default="0.0"/>
  <arg name="boost" default="false"/>
  <arg name="mm" default="0"/>

  <!-- Arguments for theora quality, images being compressed into "stream" -->
  <arg name="compressed_jpeg_quality" default="90" />
  <arg name="theora_keyframe_frequency" default="60"  />
  <arg name="theora_target_bitrate" default="50000"  />
  <arg name="theora_quality" default="8"  />
  <arg name="theora_optimize_for" default="0"  />

  <!-- Node Settings -->
  <arg name="plugin" default="false"/>
  <arg name="manager" default="bluefox_manager"/>
  <arg name="output" default="screen"/>
  <arg name="proc" default="false"/>
  <arg name="view" default="false"/>
  <arg name="calib" default="false"/>

  <!-- Standalone -->
  <arg unless="$(arg plugin)"
    name="option" value="standalone bluefox2/SingleNodelet"/>

  <!-- Manager -->
  <arg if="$(arg plugin)"
    name="option" value="load bluefox2/SingleNodelet $(arg manager)"/>

  <!-- Nodelet -->
  <node pkg="nodelet" type="nodelet" name="$(arg camera)"
    args="$(arg option)" output="$(arg output)">
    <param name="identifier" type="string" value="$(arg serial)"/>
    <param name="frame_id" type="string" value="$(arg frame_id)"/>
    <param name="camera_name" type="string" value="$(arg camera_name)"/>
    <param name="calib_url" type="string" value="$(arg calib_url)"/>
    <param name="fps" type="double" value="$(arg fps)"/>
    <param name="color" type="bool" value="$(arg color)"/>
    <param name="aec" type="bool" value="$(arg aec)"/>
    <param name="cbm" type="bool" value="$(arg cbm)"/>
    <param name="ctm" type="int" value="$(arg ctm)"/>
    <param name="dcfm" type="int" value="$(arg dcfm)"/>
    <param name="hdr" type="bool" value="$(arg hdr)"/>
    <param name="wbp" type="int" value="$(arg wbp)"/>
    <param name="expose_us" type="int" value="$(arg expose_us)"/>
    <param name="gain_db" type="double" value="$(arg gain_db)"/>
    <param name="boost" type="bool" value="$(arg boost)"/>
    <param name="mm" type="int" value="$(arg mm)"/>

    <!-- Params for theora quality, images being compressed into "stream" -->
    <param name="image_raw/compressed/jpeg_quality" type="int" value="$(arg compressed_jpeg_quality)" />
    <param name="image_raw/theora/keyframe_frequency" value="$(arg theora_keyframe_frequency)"  />
    <param name="image_raw/theora/target_bitrate" value="$(arg theora_target_bitrate)"  />
    <param name="image_raw/theora/quality" value="$(arg theora_quality)"  />
    <param name="image_raw/theora/optimize_for" value="$(arg theora_optimize_for)"  />
  </node>

  <!--Proc-->
  <arg if="$(arg plugin)"
    name="proc_option" value="load image_proc/rectify $(arg manager)"/>
  <arg unless="$(arg plugin)"
    name="proc_option" value="standalone image_proc/rectify"/>
  <node if="$(arg proc)"
    pkg="nodelet" type="nodelet" name="rectify_mono" ns="$(arg camera)"
    args="$(arg proc_option)">
    <remap from="image_mono" to="image_raw"/>
    <remap from="image_rect" to="image_rect_mono"/>
  </node>

  <!-- View -->
  <arg name="image" default="image_raw"/>
  <node if="$(arg view)"
    pkg="image_view" type="image_view" name="viewer"
    output="$(arg output)" ns="$(arg camera)" args="image:=$(arg image)">
  </node>
</launch>
