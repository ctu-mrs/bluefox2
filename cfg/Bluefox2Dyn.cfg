#!/usr/bin/env python2
PACKAGE = "bluefox2"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("fps", double_t, 0, "Frames per second", 20, 1, 200)

# Pixel Format
# http://www.matrix-vision.com/manuals/SDK_CPP/classmvIMPACT_1_1acquire_1_1ImageDestination.html#aee7cf6edaa07a5eb0d39b9b04329751e
idpf_enum = gen.enum(
    [gen.const("idpf_auto", int_t, 0,
               "The driver will decide which format to use"),
     gen.const("idpf_raw", int_t, 1, "An unprocessed block of data"),
     gen.const("idpf_mono8", int_t, 2, "A mono channel 8 bit"),
     gen.const("idpf_mono16", int_t, 9, "A mono channel 16 bit"),
     gen.const("idpf_rgb888_packed", int_t, 10, "RGB with 24 bit per pixel"),
     gen.const("idpf_bgr888_packed", int_t, 22, "BGR with 24 bit per pixel")],
    "Defines the pixel format of the resulting image")
gen.add("idpf", int_t, 0,
        "Defines the pixel format of the resulting image",
        0, 0, 22, edit_method=idpf_enum)

# Camera binning mode
# http://www.matrix-vision.com/manuals/SDK_CPP/group__DeviceSpecificInterface.html#ga915d7e18807e69567ac466541b66313b
cbm_enum = gen.enum(
    [gen.const("cbm_off", int_t, 0, "No binning"),
     gen.const("cbm_binning_h", int_t, 0x1,
               "Horizontal binning (combines 2 adjacent columns)"),
     gen.const("cbm_binning_v", int_t, 0x2,
               "Vertical binning (combines 2 adjacent rows)"),
     gen.const("cbm_binning_hv", int_t, 0x3,
               "Horizontal and vertical binning")],
    "Defines valid binning modes for the camera")
gen.add("cbm", int_t, 0,
        "Camera binning mode",
        0, 0, 3, edit_method=cbm_enum)

# Automatic exposure control
gen.add("aec", bool_t, 0,
        "Automatic exposure control",
        False)
# Expose us
gen.add("expose_us", int_t, 0,
        "Exposure time for an image in us",
        10000, 10, 1000000)

# Automatic gain control
gen.add("agc", bool_t, 0,
        "Automatic gain control",
        False)
# Gain db
gen.add("gain_db", double_t, 0,
        "Gain in dB",
        0.0, 0.0, 32.0)

# Auto control parameters
acs_enum = gen.enum(
    [gen.const("acs_unavailable", int_t, -1,
               "auto control parameters not available"),
     gen.const("acs_slow", int_t, 0, "coverge slowly to desired value"),
     gen.const("acs_medium", int_t, 1,
               "converge to desired value at medium speed"),
     gen.const("acs_fast", int_t, 2, "converge fast to desired value")],
    "Defines valid AutoControlSpeed modes")
gen.add("acs", int_t, 0,
        "Auto control speed",
        0, -1, 2, edit_method=acs_enum)

# Desired average grey value
gen.add("des_grey_value", int_t, 0,
        "desired average grey value",
        85, 0, 255)
gen.add("hdr", bool_t, 0, "high dynamic range", False)

# Dark current filter mode
dcfm_enum = gen.enum(
    [gen.const("dcfm_off", int_t, 0, "dark current filter mode off"),
     gen.const("dcfm_on", int_t, 1, "dark current filter mode on"),
     gen.const("dcfm_calibrate", int_t, 2,
               "dark current filter mode calibrate"),
     gen.const("correction_image", int_t, 3,
               "dark current filter mode send correction image")],
    "An enum to set dark current filter mode")
gen.add("dcfm", int_t, 0,
        "dark current filter mode",
        0, 0, 3, edit_method=dcfm_enum)


# Camera trigger mode
ctm_enum = gen.enum(
    [gen.const("ctm_continuous", int_t, 0, "camera trigger mode continuous"),
     gen.const("ctm_on_demand", int_t, 1, "camera trigger mode on demand"),
     gen.const("hard_sync", int_t, 2,
               "camera trigger mode hardware_sync (stereo only)")],
    "An enum to set camera trigger mode")
gen.add("ctm", int_t, 0,
        "camera trigger mode",
        0, 0, 2, edit_method=ctm_enum)

# Fix this to request count
# This is just prefilling the capture queue
gen.add("boost", bool_t, 0,
        "Boost fps", False)

# White balance paramter
wbp_enum = gen.enum([gen.const("wbp_unavailable", int_t, -1, "not available"),
                     gen.const("wbp_tungsten", int_t, 0, "Tungsten"),
                     gen.const("wbp_halogen", int_t, 1, "Halogen"),
                     gen.const("wbp_fluorescent", int_t, 2, "Fluorescent"),
                     gen.const("wbp_daylight", int_t, 3, "Day light"),
                     gen.const("wbp_photolight", int_t, 4, "Photo Light"),
                     gen.const("wbp_bluesky", int_t, 5, "Blue Sky"),
                     gen.const("wbp_user1", int_t, 6, "User1"),
                     gen.const("wbp_calibrate", int_t, 10, "Calibrate")],
                    "An enum to set white balance paramter")
gen.add("wbp", int_t, 0,
        "white balance parameter",
        6, -1, 10, edit_method=wbp_enum)

gen.add("r_gain", double_t, 0, "red gain", 1, 0.1, 10)
gen.add("g_gain", double_t, 0, "green gain", 1, 0.1, 10)
gen.add("b_gain", double_t, 0, "blue gain", 1, 0.1, 10)

# Mirror mode
mm_enum = gen.enum([gen.const("mm_off", int_t, 0, "Mirror mode off"),
                    gen.const("mm_topdown", int_t, 1, "Top down"),
                    gen.const("mm_leftright", int_t, 2, "Left right"),
                    gen.const("mm_topdown_and_leftright", int_t, 3,
                              "Top down and left right")],
                   "An enum to set mirror mode")
# Temporarily disable mm in dynamic reconfigure, you can only set it through
# launch file
# gen.add("mm", int_t, 0, "mirror mode", 0, 0, 3, edit_method=mm_enum)

exit(gen.generate(PACKAGE, "bluefox2", "Bluefox2Dyn"))
