#!/usr/bin/env python2
PACKAGE = "bluefox2"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("fps", double_t, 0, "frames per second", 20, 1, 200)
gen.add("boost", bool_t, 0, "Boost fps", False);
gen.add("color", bool_t, 0, "image encoding", False)
gen.add("binning", bool_t, 0, "horizontal and vertical binning", False)
gen.add("gain_db", double_t, 0, "gain in dB", 0.0, -1.0, 10.0)
gen.add("expose_us", int_t, 0, "expose us", 2000, 0, 100000)
gen.add("auto_fix_expose", bool_t, 0, "auto fix expose", False)
gen.add("hdr", bool_t, 0, "High Dynamic Range", False)

white_balance_enum = gen.enum([gen.const("unavailable", int_t, -1, "not available"),
                               gen.const("tungsten", int_t, 0, "Tungsten"),
                               gen.const("halogen", int_t, 1, "Halogen"),
                               gen.const("fluorescent", int_t, 2, "Fluorescent"),
                               gen.const("daylight", int_t, 3, "Day light"),
                               gen.const("photolight", int_t, 4, "Photo Light"),
                               gen.const("bluesky", int_t, 5, "Blue Sky"),
                               gen.const("user1", int_t, 6, "User1")],
                               "An enum to set white balance")
gen.add("white_balance", int_t, 0, "white balance setting", 6, -1, 6, edit_method=white_balance_enum)

dark_current_filter_enum = gen.enum([gen.const("off", int_t, 0, "Off"),
                                     gen.const("on", int_t, 1, "On"),
                                     gen.const("calibrate", int_t, 2, "Calibrate"),
                                     gen.const("correction_image", int_t, 3, "Correction Image")],
                                     "An enum to set dark current filter")
gen.add("dark_current_filter", int_t, 0, "dark current filter", 0, 0, 3, edit_method=dark_current_filter_enum)

trigger_enum = gen.enum([gen.const("continuous", int_t, 0, "continuous"),
                         gen.const("on_demand", int_t, 1, "on demand")],
                        "An enum to set trigger mode")
gen.add("trigger", int_t, 0, "trigger mode", 0, 0, 1, edit_method=trigger_enum)

exit(gen.generate(PACKAGE, "bluefox2", "Bluefox2Dyn"))
